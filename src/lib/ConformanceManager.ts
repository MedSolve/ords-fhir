import {IConformance}  from '../models/internal/Conformance';
import {HookManager}   from './HookManager';
import {DI}            from './DependencyInjector';

/**
 * Manage every resource in the application
 */
export class ConformanceManager {
    /**
     * Instanceiated conformance resource
     */
    public conformance: IConformance;
    /**
     * Reference to router
     */
    @DI.inject(HookManager)
    private hookManager: HookManager;
    /**
     * add the hooks neccercy for conformance manager to work
     */
    constructor() {
        
        // add hook
        this.hookManager.addHookPer(
            'conformance.configure',
            'auto-core-conformance-build',
            this.build
        );
        
        // ad hook
        this.hookManager.addHookPre(
            'conformance.configure',
            'auto-core-conformance-build',
            this.addAutoConformance
        );
    }
    /**
     * Add some of the autogenerated conformance fields to the conformance
     * @param   {IConformance}  conformance     conformance that needs the fields added
     * @returns {Void}
     */
    public addAutoConformance(conformance: IConformance, next: Function): void {

        conformance.name = 'Main conformance statement';
        conformance.status = 'active';
        conformance.kind = 'instance';
        conformance.fhirVersion = 'v1.0.2-7202';
        conformance.acceptUnknown = 'no';
        conformance.format = ['json'];
        conformance.rest = {
            mode: 'client',
            searchParam: [
            ]
        };

        next();
    }
    /**
     * Build the conformance
     * @param   {IConformance}  conformance     conformance to be builded
     * @returns {Void}
     */
    public build(conformance: IConformance, next: Function): void {

        // some more fields should be added to the conformance here

        // generate profile etc     profile?: Array<IReference>;
        // build the conformance
        this.conformance = conformance;
        
        next();

        // this.conformance = new Conformance(conformance, Enforce.required);
    }
}
